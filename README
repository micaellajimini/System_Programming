
		System Programming Assignment #3

						20151567 오지민
----------------------------------------------------------------

* 실행방법

20151567.c 20151567.h 파일이 있는 디렉터리를 연다.
make 를 입력해 컴파일한다.
./20151567.out 을 입력해 프로그램을 실행한다.


* 프로그램 명령어 설명

프로그램에서 실행 가능한 명령어는 다음과 같다.
1) h[elp]
2) d[ir]
3) q[uit]
4) hi[story]
5) du[mp] [start, end] 
6) e[dit] address, value
7) f[ill] start, end, value
8) reset
9) opcode mnemonic
10) opcodelist
11) type filename
12) assemble filename
13) symbol
14) progaddr [address]
15) loader [object filename1] [object filename2] [...]
16) run
17) bp [address]

1. h[elp]
- 사용법
sicsim> h
sicsim> help

- 설명
현재 프로그램에서 사용할 수 있는 명령들의 목록을 보여준다.

2. d[ir]
- 사용법
sicsim> d
sicsim> dir

- 설명
현재 디렉터리에 존재하는 디렉터리와 파일을 보여준다.
특히 실행파일의 경우 파일명 뒤에 *을,
디렉터리의 경우 /를 붙여 보여준다.

3. q[uit]
- 사용법
sicsim> q
sicsim> quit

- 설명
현재 실행중인 프로그램을 종료한다.

4. hi[story]
- 사용법
sicsim> hi
sicsim> history

- 설명
현재 프로그램을 실행하면서 입력한 명령어들을 출력한다.
유효한 명령어들은 Linked List를 이용해 저장되어 있다.

5. du[mp] [start,end]
- 사용법
sicsim> du
sicsim> dump
sicsim> du 7
sicsim> dump 7
sicsim> du 7, 10
sicsim> dump 7, 10

- 설명
메모리에 저장된 값들을 출력해준다.
start, end의 값은 16진수로 입력받는다.
start와 end의 범위는 0에서 1048575(FFFFF)사이이다.
1) start, end의 모두 입력받지 않은 경우
  내부에 저장된 주소부터 160개의 데이터를 출력해준다.

2) start 만 입력받는 경우
  start 부터 160개의 데이터를 출력해준다.

3) start, end 모두 입력받는 경우
  start부터 end까지의 메모리 데이터를 출력해준다.

6. e[dit] address, val
- 사용법
sicsim> e 7, 2A
sicsim> edit 7, 2A

- 설명
사용자가 넣고자 하는 메모리의 주소를 받아 원하는 주소에 메모리
값을 변경해준다. 넣고자 하는 값의 범위는 0에서 255사이이다.
start와 end의 범위는 0에서 1048575(FFFFF)사이이다.

7. f[ill] start, end, val
- 사용법
sicsim> f FF, A03, 3A
sicsim> fill FF, A03, 3A

- 설명
edit 명령처럼 start부터 end 범위의 메모리에 모두 value 값으로
변경해준다. 인자에 대한 조건은 dump의 start, end 범위와 edit의
val 범위와 동일하다.

8. reset
- 사용법
sicsim> reset

- 설명
모든 메모리에 0x00을 대입한다.

9. opcode mnemonic
- 사용법
sicsim> opcode ADD

- 설명
특정 명령어 mnemonic에 대한 opcode를 hashtable에서 검색해
그 값을 16진수로 나타낸다.

10. opcodelist
- 사용법
sicsim> opcodelist

- 설명
"opcode.txt"로 저장한 opcode에 대한 hash table을 출력해준다.

※주의사항
	모든 명령어 입력은 소문자로만 가능하며, 
	모든 mnemonic은 대문자이다.
	16진수 입력시에는 대, 소문자 구분이 없이 사용 가능하다.

11. type filename
- 사용법
sicsim> type 2_5.obj

- 설명
filename의 이름을 가진 file을 읽어 그 내용을 출력해준다.
파일이 존재하지 않는 경우 에러메시지를 출력한다.

12. assemble filename
- 사용법
sicsim> assemble 2_5.asm

- 설명
filename의 이름을 가진 file을 assemble한다.
assemble에 성공하는 경우 lst 파일과 obj 파일을 생성한다.
실패하는 경우, 에러가 일어나는 라인을 출력하고, 에러 원인을 알려준다.

13. symbol
- 사용법
sicsim> symbol

- 설명
직전 Assemble에 사용된 Symbol Table을 출력해주는 역할을 한다.
만약 직전 assemble이 실패했다면, symbol table은 비어있다.

14. progaddr [address]
- 사용법
sicsim> progaddr 4000

- 설명
loader 또는 run 명령어를 수행할 떄 시작하는 주소를 지정해준다.
초기값은 0x00으로 되어있다.(default)

15) loader [object filename1] [object filename2] [...]
- 사용법
sicsim> loader proga.obj progb.obj progc.obj

- 설명
filename1, filename2, ...에 해당하는 파일을 읽어 linking 작업을 수행하고,(최대 3개 가능)
그 결과를 가상 메모리에 올려준다. Load가 성공적으로 수행되었다면, load map을
화면에 출력해주며, 에러가 존재하는 경우 에러에 대한 정보를 출력해준다.

16) run
- 사용법
sicsim> run

- 설명
loader 명령어를 통해 메모리에 load된 프로그램을 실행시켜준다. progaddr로
지정된 주소부터 시작되며, 실행 결과로 레지스터의 상태를 출력해준다.
만약 breakpoint가 있다면, breakpoint까지 프로그램이 실행된다.

17) bp [address]
- 사용법
sicsim> bp
sicsim> bp clear
sicsim> bp 4000

- 설명
run하는 프로그램에서의 breakpoint를 설정한다. breakpoint는 무제한으로 지정할 수
있으며, bp [addr]로 생성가능하다. 현재 선언된 breakpoint의 확인은 bp 명령어로
확인가능하며, breakpoint에 대한 초기화는 bp clear로 가능하다.